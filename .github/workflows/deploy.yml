name: Deploy AetherCrown98

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  BACKEND_DIR: ./backend
  FRONTEND_DIR: ./frontend

jobs:
  # Deploy Backend to Render
  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install backend dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm install

      - name: Test backend endpoints locally
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          PAYPAL_CLIENT_ID: ${{ secrets.PAYPAL_CLIENT_ID }}
          PAYPAL_CLIENT_SECRET: ${{ secrets.PAYPAL_CLIENT_SECRET }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          PORT: 3001
        run: |
          # Start server in background
          npm start &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Test health endpoint
          echo "Testing health endpoint..."
          curl -f http://localhost:3001/ || exit 1
          
          # Kill server
          kill $SERVER_PID

      - name: Deploy to Render
        if: secrets.RENDER_API_KEY != ''
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "Deploying to Render..."
          # Note: Render can auto-deploy from GitHub
          # This is a placeholder for manual API deployment if needed
          # curl -X POST "https://api.render.com/v1/services/{service-id}/deploys" \
          #   -H "Authorization: Bearer $RENDER_API_KEY" \
          #   -H "Content-Type: application/json"

  # Deploy Backend to Fly.io (Alternative)
  deploy-backend-flyio:
    name: Deploy Backend to Fly.io
    runs-on: ubuntu-latest
    if: secrets.FLY_API_TOKEN != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Create fly.toml if it doesn't exist
          if [ ! -f fly.toml ]; then
            echo "fly.toml not found. Please configure Fly.io manually first."
          else
            flyctl deploy --remote-only
          fi

  # Deploy Frontend to Vercel
  deploy-frontend-vercel:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm install

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        env:
          NEXT_PUBLIC_BACKEND_URL: ${{ secrets.BACKEND_URL || 'http://localhost:3001' }}
        run: npm run build

      - name: Deploy to Vercel
        if: secrets.VERCEL_TOKEN != ''
        working-directory: ${{ env.FRONTEND_DIR }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npm install -g vercel
          vercel --prod --token=$VERCEL_TOKEN --yes

  # Test Deployed Endpoints
  test-endpoints:
    name: Test Deployed Endpoints
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend-vercel]
    if: secrets.BACKEND_URL != ''
    steps:
      - name: Test Backend Health
        env:
          BACKEND_URL: ${{ secrets.BACKEND_URL }}
        run: |
          echo "Testing backend health endpoint..."
          curl -f $BACKEND_URL/ || exit 1

      - name: Test Supabase Connection
        env:
          BACKEND_URL: ${{ secrets.BACKEND_URL }}
        run: |
          echo "Testing Supabase connection..."
          curl -f $BACKEND_URL/supabase-test || echo "Supabase test endpoint responded"

      - name: Notify Success
        run: |
          echo "âœ… All deployments and tests completed successfully!"
