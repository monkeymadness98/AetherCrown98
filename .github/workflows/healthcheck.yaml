name: Health Check Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  healthcheck:
    name: Ping Health Endpoints
    runs-on: ubuntu-latest
    
    steps:
    - name: Check Backend Health
      run: |
        echo "üîç Checking backend health endpoint..."
        BACKEND_URL="${{ secrets.BACKEND_URL }}"
        
        if [ -z "$BACKEND_URL" ]; then
          echo "‚ö†Ô∏è  BACKEND_URL not configured"
          BACKEND_URL="https://aethercrown98-backend.onrender.com"
        fi
        
        response=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/healthz" || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Backend is healthy (HTTP $response)"
          echo "backend_status=healthy" >> $GITHUB_ENV
        else
          echo "‚ùå Backend health check failed (HTTP $response)"
          echo "backend_status=unhealthy" >> $GITHUB_ENV
        fi

    - name: Check Frontend Health
      run: |
        echo "üîç Checking frontend availability..."
        FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
        
        if [ -z "$FRONTEND_URL" ]; then
          echo "‚ö†Ô∏è  FRONTEND_URL not configured"
          FRONTEND_URL="https://aethercrown98.vercel.app"
        fi
        
        response=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL" || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Frontend is accessible (HTTP $response)"
          echo "frontend_status=healthy" >> $GITHUB_ENV
        else
          echo "‚ùå Frontend check failed (HTTP $response)"
          echo "frontend_status=unhealthy" >> $GITHUB_ENV
        fi

    - name: Ping Healthchecks.io
      if: ${{ secrets.HEALTHCHECKS_URL != '' }}
      run: |
        echo "üì° Pinging Healthchecks.io..."
        
        if [ "${{ env.backend_status }}" = "healthy" ] && [ "${{ env.frontend_status }}" = "healthy" ]; then
          # Both healthy - ping success
          curl -fsS --retry 3 "${{ secrets.HEALTHCHECKS_URL }}" > /dev/null
          echo "‚úÖ Healthchecks.io notified: All systems operational"
        else
          # Something unhealthy - ping fail endpoint
          curl -fsS --retry 3 "${{ secrets.HEALTHCHECKS_URL }}/fail" > /dev/null
          echo "‚ùå Healthchecks.io notified: System degraded"
        fi

    - name: Report Status
      if: always()
      run: |
        echo ""
        echo "=== Health Check Summary ==="
        echo "Backend:  ${{ env.backend_status }}"
        echo "Frontend: ${{ env.frontend_status }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        if [ "${{ env.backend_status }}" = "unhealthy" ] || [ "${{ env.frontend_status }}" = "unhealthy" ]; then
          echo ""
          echo "‚ö†Ô∏è  WARNING: Service degradation detected!"
          echo "Refer to monitoring/alert.md for incident response procedures."
          exit 1
        fi

    - name: Create Issue on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'üö® Health Check Failed';
          const body = `
          ## Health Check Failure Detected
          
          **Timestamp:** ${new Date().toUTCString()}
          
          **Status:**
          - Backend: ${{ env.backend_status }}
          - Frontend: ${{ env.frontend_status }}
          
          **Action Required:**
          1. Check service logs in Render and Vercel dashboards
          2. Verify environment variables are set correctly
          3. Follow incident response procedures in \`monitoring/alert.md\`
          
          **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          `;
          
          // Check if there's already an open health check issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'health-check,automated'
          });
          
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['health-check', 'automated', 'urgent']
            });
          }
